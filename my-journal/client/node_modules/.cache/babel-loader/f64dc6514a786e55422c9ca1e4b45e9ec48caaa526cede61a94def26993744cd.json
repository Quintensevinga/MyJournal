{"ast":null,"code":"const BASE_URL = 'http://localhost:3001';\nconst apiService = {};\napiService.getAllJournals = () => {\n  return fetch(`${BASE_URL}/journals`).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).catch(error => {\n    console.error('Error getting journals:', error);\n    throw error;\n  });\n};\n\n// get specific journal\napiService.getJournalData = journalId => {\n  return fetch(`${BASE_URL}/journal/${journalId}`).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).catch(error => {\n    console.error('Error getting journal:', error);\n    throw error;\n  });\n};\n\n// add a journal\napiService.addJournal = newJournal => {\n  return fetch(`${BASE_URL}/journal`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newJournal)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).catch(error => {\n    console.error('Error sending data:', error);\n  });\n};\n\n// add a new entry to specific journal \napiService.addJournalEntry = (journalId, newEntry) => {\n  return fetch(`${BASE_URL}/journalEntry/${journalId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newEntry)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).catch(error => {\n    console.error('Error sending data:', error);\n  });\n};\n\n// update a journal entry\napiService.updateJournalEntry = (journalId, entryId, updatedData) => {\n  return fetch(`${BASE_URL}/journal/${journalId}/entry/${entryId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updatedData)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).catch(error => {\n    console.error('Error updating journal entry:', error);\n  });\n};\napiService.updateJournal = (journalId, updatedJournal) => {\n  console.log(updatedJournal);\n  return fetch(`${BASE_URL}/updateJournal/${journalId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updatedJournal)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).catch(error => {\n    console.error('Error updating journal:', error);\n  });\n};\n\n//update single journal entry\napiService.updateSingleJournalEntry = (entryId, updatedEntry) => {\n  return fetch(`${BASE_URL}/entry/${entryId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(updatedEntry)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    console.log(updatedEntry);\n    return response.json();\n  }).catch(error => {\n    console.error('Error updating journal entry:', error);\n  });\n};\napiService.getAllFavoriteEntries = () => {\n  return fetch(`${BASE_URL}/favorites`).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).catch(error => {\n    console.error('Error getting favorite entries:', error);\n    throw error;\n  });\n};\napiService.deleteJournalEntry = (journalId, entryId) => {\n  return fetch(`${BASE_URL}/journal/${journalId}/entry/${entryId}`, {\n    method: 'DELETE'\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n  }).catch(error => {\n    console.error('Error deleting journal entry:', error);\n    throw error;\n  });\n};\napiService.deleteJournal = journalId => {\n  console.log(journalId);\n  return fetch(`${BASE_URL}/deleteJournal/${journalId}`, {\n    method: 'DELETE'\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n  }).catch(error => {\n    console.error('Error deleting journal:', error);\n    throw error;\n  });\n};\nexport default apiService;","map":{"version":3,"names":["BASE_URL","apiService","getAllJournals","fetch","then","response","ok","Error","json","catch","error","console","getJournalData","journalId","addJournal","newJournal","method","headers","body","JSON","stringify","addJournalEntry","newEntry","updateJournalEntry","entryId","updatedData","updateJournal","updatedJournal","log","updateSingleJournalEntry","updatedEntry","getAllFavoriteEntries","deleteJournalEntry","deleteJournal"],"sources":["/Users/quinten/Documents/MyJournal/my-journal/client/src/apiService.js"],"sourcesContent":["const BASE_URL = 'http://localhost:3001';\n\nconst apiService = {};\n\napiService.getAllJournals = () => {\n  return fetch(`${BASE_URL}/journals`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      console.error('Error getting journals:', error);\n      throw error;\n    });\n};\n\n// get specific journal\napiService.getJournalData = (journalId) => {\n  return fetch(`${BASE_URL}/journal/${journalId}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      console.error('Error getting journal:', error);\n      throw error;\n    });\n};\n\n// add a journal\napiService.addJournal = (newJournal) => {\n  return fetch(`${BASE_URL}/journal`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(newJournal)\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      console.error('Error sending data:', error);\n    });\n} \n\n// add a new entry to specific journal \napiService.addJournalEntry = (journalId, newEntry) => {\n  return fetch(`${BASE_URL}/journalEntry/${journalId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(newEntry)\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      console.error('Error sending data:', error);\n    });\n}\n\n// update a journal entry\napiService.updateJournalEntry = (journalId, entryId, updatedData) => {\n  return fetch(`${BASE_URL}/journal/${journalId}/entry/${entryId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(updatedData),\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      console.error('Error updating journal entry:', error);\n    });\n};\n\napiService.updateJournal = (journalId, updatedJournal) => {\n  console.log(updatedJournal);\n  return fetch(`${BASE_URL}/updateJournal/${journalId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(updatedJournal),\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      console.error('Error updating journal:', error);\n    });\n};\n\n//update single journal entry\napiService.updateSingleJournalEntry = (entryId, updatedEntry) => {\n  return fetch(`${BASE_URL}/entry/${entryId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(updatedEntry),\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      console.log(updatedEntry);\n      return response.json();\n    })\n    .catch((error) => {\n      console.error('Error updating journal entry:', error);\n    });\n};\n\napiService.getAllFavoriteEntries = () => {\n  return fetch(`${BASE_URL}/favorites`) \n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    })\n    .catch((error) => {\n      console.error('Error getting favorite entries:', error);\n      throw error;\n    });\n};\n\napiService.deleteJournalEntry = (journalId, entryId) => {\n  return fetch(`${BASE_URL}/journal/${journalId}/entry/${entryId}`, {\n    method: 'DELETE',\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n    })\n    .catch((error) => {\n      console.error('Error deleting journal entry:', error);\n      throw error;\n    });\n};\n\napiService.deleteJournal = (journalId) => {\n  console.log(journalId);\n  return fetch(`${BASE_URL}/deleteJournal/${journalId}`, {\n    method: 'DELETE',\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n    })\n    .catch((error) => {\n      console.error('Error deleting journal:', error);\n      throw error;\n    });\n};\n\nexport default apiService;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}